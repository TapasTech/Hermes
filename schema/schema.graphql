type Activity {
  id: ID!
  createdAt: Date
  updatedAt: Date
  user: User
  verb: String
  payload: Object
}

type Answer {
  id: ID!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  user: User
  question: Question
  content: String
  dataSets(page: Int, count: Int): PaginatedDataSet
  dataReports(page: Int, count: Int): PaginatedDataReport
  comments(page: Int, count: Int): PaginatedComment
  commentsCount: Int
  upVotesCount: Int
  downVotesCount: Int
  totalVotesCount: Int
  mutation: AnswerMutation
}

type AnswerMutation {
  update(content: String): Answer
  addDataSet(id: ID!): Answer
  removeDataSet(id: ID!): Answer
  addDataReport(id: ID!): Answer
  removeDataReport(id: ID!): Answer
  voteUp: Answer
  voteDown: Answer
  createComment(content: String!, reply_to_id: ID): Comment
}

type Business {
  id: ID!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  user: User
  parentBusiness: Business
  childBusinesses: [Business]
}

type Comment {
  id: ID!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  user: User
  replyTo: User
  answer: Answer
  content: String
  upVotesCount: Int
  downVotesCount: Int
  totalVotesCount: Int
  mutation: CommentMutation
}

type CommentMutation {
  voteUp: Comment
  voteDown: Comment
}

type DataReport {
  id: ID!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  user: User
  title: String
  url: String
  questions(page: Int, count: Int): PaginatedQuestion
  answers(page: Int, count: Int): PaginatedAnswer
  mutation: DataReportMutation
}

type DataReportMutation {
  update(title: String, url: String): DataReport
}

type DataSet {
  id: ID!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  user: User
  title: String
  url: String
  questions(page: Int, count: Int): PaginatedQuestion
  answers(page: Int, count: Int): PaginatedAnswer
  mutation: DataSetMutation
}

type DataSetMutation {
  update(title: String, url: String): DataSet
}

scalar Date

type Education {
  id: ID!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  user: User
  organization: String
  direction: String
  mutation: EducationMutation
}

type EducationMutation {
  update(education: String, position: String): Education
}

type Employment {
  id: ID!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  user: User
  employment: String
  position: String
  mutation: EmploymentMutation
}

type EmploymentMutation {
  update(employment: String, position: String): Employment
}

type Location {
  id: ID!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  user: User
  name: String
  mutation: LocationMutation
}

type LocationMutation {
  update(name: String): Location
}

type Mutation {
  createUser(displayName: String!, password: String!, email: String): User
  createAuthToken(email: String!, password: String!): UserWithAuthToken
  renewAuthToken: UserWithAuthToken
  createQuestion(title: String!, content: String!): Question
  createDataSet(title: String!, url: String!): DataSet
  createDataReport(title: String!, url: String!): DataReport
}

scalar Object

type PaginatedActivity {
  data: [Activity]
  meta: PaginationMeta
}

type PaginatedAnswer {
  data: [Answer]
  meta: PaginationMeta
}

type PaginatedComment {
  data: [Comment]
  meta: PaginationMeta
}

type PaginatedDataReport {
  data: [DataReport]
  meta: PaginationMeta
}

type PaginatedDataSet {
  data: [DataSet]
  meta: PaginationMeta
}

type PaginatedQuestion {
  data: [Question]
  meta: PaginationMeta
}

type PaginatedTopic {
  data: [Topic]
  meta: PaginationMeta
}

type PaginatedUser {
  data: [User]
  meta: PaginationMeta
}

type PaginationMeta {
  current_page: Int
  total_pages: Int
  total_count: Int
}

type Query {
  user(id: String!): User
  me: User
  topic(id: String!): Topic
  topics(page: Int, count: Int): PaginatedTopic
  question(id: String!): Question
  answer(id: String!): Answer
  data_sets(page: Int, count: Int): PaginatedDataSet
  data_reports(page: Int, count: Int): PaginatedDataReport
  hotAnswers(page: Int, count: Int): PaginatedAnswer
  searchQuestions(query: String!, page: Int, count: Int): PaginatedQuestion
}

type Question {
  id: ID!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  user: User
  title: String
  content: String
  topics: [Topic]
  dataSets(page: Int, count: Int): PaginatedDataSet
  dataReports(page: Int, count: Int): PaginatedDataReport
  answers(page: Int, count: Int): PaginatedAnswer
  answersCount: Int
  upVotesCount: Int
  downVotesCount: Int
  totalVotesCount: Int
  mutation: QuestionMutation
}

type QuestionMutation {
  update(title: String!, content: String): Question
  addTopic(id: ID!): Topic
  removeTopic(id: ID!): Topic
  addDataSet(id: ID!): DataSet
  removeDataSet(id: ID!): DataSet
  addDataReport(id: ID!): DataSet
  removeDataReport(id: ID!): DataSet
  voteUp: Question
  voteDown: Question
  follow: Question
  unfollow: Question
  createAnswer(content: String!): Answer
}

type Topic {
  id: ID!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  name: String
  origin: Topic
  aliases(page: Int, count: Int): PaginatedTopic
  questions(page: Int, count: Int): PaginatedQuestion
}

type User {
  id: ID!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  email: String
  displayName: String
  gender: String
  business: Business
  location: Location
  employment: Employment
  education: Education
  followers(page: Int, count: Int): PaginatedUser
  followees(page: Int, count: Int): PaginatedUser
  followersCount: Int
  followeesCount: Int
  questions(page: Int, count: Int): PaginatedQuestion
  answers(page: Int, count: Int): PaginatedAnswer
  comments(page: Int, count: Int): PaginatedComment
  replyComments(page: Int, count: Int): PaginatedComment
  questionsCount: Int
  answersCount: Int
  dataSets(page: Int, count: Int): PaginatedDataSet
  dataReports(page: Int, count: Int): PaginatedDataReport
  activities(page: Int, count: Int): PaginatedActivity
  mutation: UserMutation
}

type UserMutation {
  update(oldPassword: String!, displayName: String, password: String!, email: String): User
  follow: User
  unfollow: User
}

type UserWithAuthToken {
  user: User
  authToken: String
}
